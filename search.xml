<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OrientDB入门知识介绍]]></title>
    <url>%2F2017%2F10%2F31%2ForientDB%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[orientdb基本概念orientDB是一个Document-Graph databases,是一个NoSql数据库，支持SQL查询; Recordrecord是数据查询和存储的最小单元，主要包括4种类型： Document： 文档数据库概念； RecordBytes： BLOB，二进制数据； Vertex： Graph 数据库概念； Edge： Graph 数据库概念； Record ID类似关系数据库中的主键，由orientDB自动分配；格式：1234#&lt;cluster&gt;:&lt;position&gt;cluster: 正数，表示持久化的record；cluster：负数，表示临时的record； Record Versionrecord的每一次更新操作，Record Version都会自增；在乐观锁事务中，通过Record Version 可以检测冲突； Class 面向对象中的概念； 类比关系型数据库中的表； 支持继承； 一个Class可以包含1个或多个Cluster，至少应包含1个Cluster； 当新建一个Class时，orientDB默认会创建N个Cluster(N：和Cpu核数相同)； 逻辑框架：组织数据（与Cluster作对比）； Cluster The Cluster is a place where a group of records are stored. 用于存储record，当新建一个record时，都会将该record存储到一个Cluster中； 物理或内存空间：真正存储数据（与Class作对比）； 可类比 Document数据库中的集合 或 关系型数据库中的表； 一个database最多可以有32767个Cluster； Class vs. Cluster in Queries正确理解Cluster Class包括2个Cluster 向Class中插入record（使用默认的Cluster） 查询数据（直接查询Class） 查询数据（直接查询Cluster） 示例说明： 1234Invoice是一个Class，该Class包含2个Cluster, 分别为 invoice2016、invoice2017；Class: Invoice （包含属性 year）；Cluster1: invoice2016, 存储2016年相关数据；Cluster2: invoice2017, 存储2017年相关数据； 则如下查询结果相同，但查询Cluster效率更高：12345// 查询 Classorientdb&gt; SELECT FROM Invoice WHERE year = 2016// 查询Cluster：效率更高orientdb&gt; SELECT FROM CLUSTER:invoice2016 RelationshipsRelationships介绍 关系型数据库中，一般使用Join来处理连接，如下图所示： 12mysql&gt; SELECT B.location FROM Customer A, Address B WHERE A.name='Luca' AND A.address=B.id; 12mysql&gt; SELECT B.location FROM Customer A, Address B WHERE A.name='Luca' AND B.customer=A.id; 12mysql&gt; SELECT C.location FROM Customer A, CustomerAddress B, Address C WHERE A.name='Luca' AND B.id=A.id AND B.address=C.id; 在关系型数据库中，多表连接查询时，使用JOIN语句(时间复杂度：O(log N / block_size))，而JOIN语句在数据量比较大时，相当耗时； 在OrientDB中，使用Link来管理连接，类似指针，查询时间为：O(1);orientdb支持两种relationships： referenced： embedded：Referenced Relationships 可以类比关系型数据库中的Join语句，但是比Join语句效率更高； 每个record都有rid； 1:1 and n:1 Referenced Relationships； 1:n and n:n Referenced Relationships；1234 customer Record A -------------&gt; Record BCLASS=Invoice CLASS=Customer RID=5:23 RID=10:2 record A contains the reference to record B in the property customer embedded Relationships 被嵌入的record没有rid； 1:1 and n:1 Embedded Relationships; 1:n and n:n Embedded Relationships; 1234 address Record A &lt;&gt;----------&gt; Record BCLASS=Account CLASS=Address RID=5:23 NO RID! record A contains the entirety of record B in the property address1orientdb&gt; SELECT FROM Account WHERE address.city = &apos;Rome&apos; DatabaseDatabase URL:&lt;engine&gt;:&lt;db-name&gt; plocal: This engine writes to the file system to store data. memory: Open a database completely in memory; remote: The storage will be opened via a remote network connection.remote:&lt;server&gt;:[&lt;port&gt;]/db-name ; orientdb vs 关系型数据库区别1： relational最重要的区别， orientDB没有Join，而是使用Link表示连接；12345678SELECT *FROM Employee A, City BWHERE A.city = B.idAND B.name = 'Rome'(关系型数据库)vs（orientDB）SELECT * FROM Employee WHERE city.name = 'Rome' 区别2: orientDB的*是可选的12345SELECT * FROM CustomervsSELECT FROM Customer 区别3： DISTINCT SQL: DISTINCT是关键字； OrientDB： DISTINCT是函数；12345SELECT DISTINCT name FROM CityvsSELECT DISTINCT(name) FROM City 区别4： HAVINGorientdb不支持Having；12345678SELECT city, sum(salary) AS salaryFROM EmployeeGROUP BY cityHAVING salary &gt; 1000vs SELECT FROM ( SELECT city, SUM(salary) AS salary FROM Employee GROUP BY city ) WHERE salary &gt; 1000 区别5： 多表查询orientDB查询：一次最多只支持一个Class查询，不支持类似：1SELECT FROM E, V (不支持) 区别6： metadataorientDB支持查询 metadata； schema, to get classes and properties indexmanager, to get information about indexes1234567891011121314151617select expand(classes) from metadata:schemaselect expand(properties) from ( select expand(classes) from metadata:schema) where name = 'OUser'select customFields from ( select expand(classes) from metadata:schema ) where name="OUser"elect customFields from ( select expand(properties) from ( select expand(classes) from metadata:schema ) where name="OUser") where name="password"select expand(indexes) from metadata:indexmanager orientDB相关文章Multi-master replicationDistributed ArchitectureDistributed-Sharding]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>orientDB</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建github博客]]></title>
    <url>%2F2017%2F10%2F28%2F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[搭建流程 安装node.js （默认会将npm一起安装） 安装hexo-cli: npm install hexo-cli -g ; 安装hexo-deployer-git：npm install hexo-deployer-git --save ; 然后是修改配置文件和安装主题等； 配置文件hexo和主题配置文件 主题安装使用next 主题贴标签 站点配置文件有配置：tag_dir: tags 主题配置文件有配置：tags: tags 新建tags页面： source/tags/index.md 123456---title: tagsdate: 2017-10-28 12:05:43type: &quot;tags&quot;comments: false--- 文章中添加tag： 123456title: TagEditTextdate: 2016-11-19 10:44:25tags: - Tag1 - Tag2 - Tag3 分类，给文章归档 站点配置文件有配置：category_dir: categories 主题配置文件有配置：categories: /categories 新建categories页面： source/categories/index.md 123456---title: categoriesdate: 2017-10-28 12:09:44type: &quot;categories&quot;comments: false--- 在文章中添加categories 1234title: TagEditTextdate: 2016-11-19 10:44:25categories: - cate 添加评论功能 （TODO） 采坑记录github的参考名称必须为xxx.github.io; ssh链接问题先产生ssh秘钥，然后将key添加到github上； deploy配置1234deploy: type: git repo: git@github.com:ssslinppp/ssslinppp.github.io.git branch: master ERROR Deployer not found: git执行下面的语句：1npm install hexo-deployer-git --save 然后重新执行：12hexo ghexo d 发布新文章只需要将xxx.md放到目录：source\_posts\下面，然后执行：123hexo cleanhexo ghexo d 参考链接Hexo 博客搭建指南Windows下GitHub + Hexo搭建个人博客]]></content>
      <categories>
        <category>install</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
